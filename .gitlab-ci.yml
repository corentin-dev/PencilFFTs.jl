# Below is the template to run your tests in Julia
.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  tags:
    - julia

  # Note: OpenMPI doesn't support running as root, unless --allow-run-as-root is
  # passed to mpirun. With MPICH there's no such problem.
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends mpich libmpich-dev

  script:
    - mpichversion
    - julia -e 'using InteractiveUtils;
                versioninfo()'
    - julia --code-coverage=user -e
               'using Pkg;
                Pkg.clone(pwd());
                Pkg.build("PencilFFTs");
                Pkg.test("PencilFFTs"; coverage=true)'
    - julia -e 'using Pkg;
                Pkg.add("Coverage");
                import PencilFFTs;
                cd(joinpath(dirname(pathof(PencilFFTs)), ".."));
                using Coverage;
                cl, tl = get_summary(process_folder());
                println("(", cl/tl*100, "%) covered")'

# Name a test and select an appropriate image.
# images comes from Docker hub

# Note: test will only work starting from Julia 1.2, because of the way how test
# dependencies are specified (using a separate test/Project.toml file).
# See https://julialang.github.io/Pkg.jl/v1/creating-packages/#Test-specific-dependencies-in-Julia-1.2-and-above-1

test:1.2:
  image: julia:1.2
  <<: *test_definition

# Right now latest = 1.2
# test:latest:
#   image: julia:latest
#   <<: *test_definition

test:1.3:
  image: julia:1.3
  <<: *test_definition

# Maybe you would like to test your package against the development branch:
# test:1.1-dev (not sure there is such an image in docker, so not tested yet):
#  image: julia:v1.1-dev
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.

# Example documentation deployment
pages:
  image: julia:latest
  stage: deploy
  script:
    - apt-get update -qq && apt-get install -y git  # needed by Documenter
    - apt-get install -y --no-install-recommends mpich libmpich-dev  # needed to import PencilFFTs
    - julia -e 'using Pkg; Pkg.clone(pwd()); Pkg.build("PencilFFTs");'  # rebuild Julia (can be put somewhere else I'm sure
    - julia -e 'using Pkg; import PencilFFTs; Pkg.add("Documenter")'  # install Documenter
    - julia --color=yes docs/make.jl  # make documentation
    - mv docs/build public  # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  only:
    - master

# WARNING: This template is using the `julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: https://hub.docker.com/_/julia/
